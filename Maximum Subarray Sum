"""
Problem:
Given an array of numbers, find the maximum sum of any contiguous subarray of the array.
For example, given the array [34, -50, 42, 14, -5, 86], the maximum sum would be 137, since we would take elements 42, 14, -5, and 86.
Given the array [-5, -1, -8, -9], the maximum sum would be 0, since we would not take any elements.
Follow up: Do this in O(N) time.


Input Format:
The first line of input contains size of array, which is denoted by N and second line of input contains N space separated integers.

Output Format:
The first and only line of output should print the maximum subarray sum, as described in the description.

Solution:
"""
#! /usr/bin/env python
n = int(input())
x = list(map(int, input().split()))
l=[]
for i in range(0, n):
    
    for j in range(i+1, n):
        sum = 0
        k=i
        while(k<=j):
            sum =  sum + x[k]
            k = k+1
			
            
        l.append(sum)
        
        
l.extend(x)
print(max(l))
